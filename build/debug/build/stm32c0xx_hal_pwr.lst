ARM GAS  C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32c0xx_hal_pwr.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c"
  18              		.section	.text.HAL_PWR_DeInit,"ax",%progbits
  19              		.align	1
  20              		.global	HAL_PWR_DeInit
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	HAL_PWR_DeInit:
  26              	.LFB214:
   1:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /**
   2:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   ******************************************************************************
   3:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @file    stm32c0xx_hal_pwr.c
   4:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @author  MCD Application Team
   5:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @brief   PWR HAL module driver.
   6:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:
   8:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *           + Initialization/de-initialization functions
   9:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *           + Peripheral Control functions
  10:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *
  11:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   ******************************************************************************
  12:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @attention
  13:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *
  14:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * Copyright (c) 2022 STMicroelectronics.
  15:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * All rights reserved.
  16:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *
  17:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * This software is licensed under terms that can be found in the LICENSE file
  18:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * in the root directory of this software component.
  19:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  20:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *
  21:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   ******************************************************************************
  22:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   */
  23:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
  24:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /* Includes ------------------------------------------------------------------*/
  25:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** #include "stm32c0xx_hal.h"
  26:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
  27:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /** @addtogroup STM32C0xx_HAL_Driver
  28:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @{
  29:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   */
  30:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
  31:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /** @addtogroup PWR
  32:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @{
ARM GAS  C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s 			page 2


  33:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   */
  34:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
  35:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** #ifdef HAL_PWR_MODULE_ENABLED
  36:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
  37:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  38:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /* Private define ------------------------------------------------------------*/
  39:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /** @defgroup PWR_Private_Defines PWR Private Defines
  40:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @{
  41:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   */
  42:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
  43:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /**
  44:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @}
  45:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   */
  46:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
  47:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /* Private macro -------------------------------------------------------------*/
  48:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /* Private variables ---------------------------------------------------------*/
  49:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  50:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /* Exported functions --------------------------------------------------------*/
  51:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /** @addtogroup PWR_Exported_Functions  PWR Exported Functions
  52:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @{
  53:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   */
  54:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
  55:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /** @addtogroup PWR_Exported_Functions_Group1  Initialization and de-initialization functions
  56:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @brief  Initialization and de-initialization functions
  57:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *
  58:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** @verbatim
  59:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****  ===============================================================================
  60:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****               ##### Initialization and de-initialization functions #####
  61:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****  ===============================================================================
  62:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     [..]
  63:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
  64:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** @endverbatim
  65:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @{
  66:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   */
  67:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
  68:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /**
  69:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @brief  Deinitialize the HAL PWR peripheral registers to their default reset
  70:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****             values.
  71:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @retval None
  72:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   */
  73:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** void HAL_PWR_DeInit(void)
  74:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** {
  27              		.loc 1 74 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  75:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   __HAL_RCC_PWR_FORCE_RESET();
  32              		.loc 1 75 3 view .LVU1
  33 0000 054B     		ldr	r3, .L2
  34 0002 D96A     		ldr	r1, [r3, #44]
  35 0004 8022     		movs	r2, #128
  36 0006 5205     		lsls	r2, r2, #21
  37 0008 0A43     		orrs	r2, r1
  38 000a DA62     		str	r2, [r3, #44]
  76:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   __HAL_RCC_PWR_RELEASE_RESET();
  39              		.loc 1 76 3 view .LVU2
ARM GAS  C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s 			page 3


  40 000c DA6A     		ldr	r2, [r3, #44]
  41 000e 0349     		ldr	r1, .L2+4
  42 0010 0A40     		ands	r2, r1
  43 0012 DA62     		str	r2, [r3, #44]
  77:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** }
  44              		.loc 1 77 1 is_stmt 0 view .LVU3
  45              		@ sp needed
  46 0014 7047     		bx	lr
  47              	.L3:
  48 0016 C046     		.align	2
  49              	.L2:
  50 0018 00100240 		.word	1073876992
  51 001c FFFFFFEF 		.word	-268435457
  52              		.cfi_endproc
  53              	.LFE214:
  55              		.section	.text.HAL_PWR_EnableWakeUpPin,"ax",%progbits
  56              		.align	1
  57              		.global	HAL_PWR_EnableWakeUpPin
  58              		.syntax unified
  59              		.code	16
  60              		.thumb_func
  62              	HAL_PWR_EnableWakeUpPin:
  63              	.LVL0:
  64              	.LFB215:
  78:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
  79:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /**
  80:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @}
  81:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   */
  82:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
  83:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /** @addtogroup PWR_Exported_Functions_Group2  Peripheral Control functions
  84:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *  @brief Low Power modes configuration functions
  85:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *
  86:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** @verbatim
  87:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
  88:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****  ===============================================================================
  89:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****                  ##### Peripheral Control functions #####
  90:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****  ===============================================================================
  91:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
  92:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     [..]
  93:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
  94:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     *** WakeUp pin configuration ***
  95:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     ================================
  96:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     [..]
  97:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****       (+) WakeUp pins are used to wakeup the system from Standby mode or
  98:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           Shutdown mode. WakeUp pins polarity can be set to configure event
  99:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           detection on high level (rising edge) or low level (falling edge).
 100:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 101:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     *** Low Power mode configuration ***
 102:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     =====================================
 103:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     [..]
 104:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****       The devices feature 4 low-power modes:
 105:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****       (+) Sleep mode: Cortex-M0+ core stopped, peripherals kept running,
 106:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           regulator is main mode.
 107:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****       (+) Stop 0 mode: all clocks are stopped except LSI and LSE, regulator is
 108:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****            main mode.
 109:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****       (+) Standby mode: all clocks are stopped except LSI and LSE, regulator is
 110:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           disable.
ARM GAS  C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s 			page 4


 111:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****       (+) Shutdown mode: all clocks are stopped except LSE, regulator is
 112:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           disable.
 113:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 114:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 115:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****    *** Sleep mode ***
 116:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****    =========================================
 117:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     [..]
 118:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****       (+) Entry:
 119:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           The Sleep is entered through HAL_PWR_EnterSLEEPMode() API specifying
 120:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****       the main regulator per default and if exit is interrupt or event
 121:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           triggered.
 122:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           (++) PWR_MAINREGULATOR_ON: Sleep mode (regulator in main mode).
 123:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFI: Core enters sleep mode with WFI instruction
 124:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE: Core enters sleep mode with WFE instruction
 125:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****       (+) WFI Exit:
 126:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****         (++) Any interrupt enabled in nested vectored interrupt controller (NVIC)
 127:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****       (+) WFE Exit:
 128:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****         (++) Any wakeup event if cortex is configured with SEVONPEND = 0
 129:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****         (++) Interrupt even when disabled in NVIC if cortex is configured with
 130:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****              SEVONPEND = 1
 131:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 132:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****    *** Stop 0 mode ***
 133:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****    =============================
 134:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     [..]
 135:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****       (+) Entry:
 136:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           The Stop modes are entered through the following APIs:
 137:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           (++) HAL_PWR_EnterSTOPMode() with following settings:
 138:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****               (+++) PWR_MAINREGULATOR_ON to enter STOP0 mode.
 139:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****       (+) Exit (interrupt or event-triggered, specified when entering STOP mode):
 140:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           (++) PWR_STOPENTRY_WFI: enter Stop mode with WFI instruction
 141:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           (++) PWR_STOPENTRY_WFE: enter Stop mode with WFE instruction
 142:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****       (+) WFI Exit:
 143:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           (++) Any EXTI line (internal or external) configured in interrupt mode
 144:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****                with corresponding interrupt enable in NVIC
 145:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****       (+) WFE Exit:
 146:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           (++) Any EXTI line (internal or external) configured in event mode if
 147:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****                cortex is configured with SEVONPEND = 0
 148:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           (++) Any EXTI line configured in interrupt mode (even if the
 149:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****                corresponding EXTI Interrupt vector is disabled in the NVIC) if
 150:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****                cortex is configured with SEVONPEND = 0. The interrupt source can
 151:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****                be external interrupts or peripherals with wakeup capability.
 152:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 153:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****    *** Standby mode ***
 154:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****    ====================
 155:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     [..]
 156:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****       (+) Entry:
 157:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           (++) The Standby mode is entered through HAL_PWR_EnterSTANDBYMode() API, by
 158:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****                setting SLEEPDEEP in Cortex control register.
 159:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****       (+) Exit:
 160:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           (++) WKUP pin edge detection, RTC event (alarm, timestamp),
 161:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****                LSE CSS detection, reset on NRST pin, IWDG reset & BOR reset.
 162:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     [..] Exiting Standby generates a power reset: Cortex is reset and execute
 163:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****          Reset handler vector, all registers in the Vcore domain are set to
 164:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****          their reset value. Registers outside the VCORE domain (RTC, WKUP, IWDG,
 165:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****          and Standby/Shutdown modes control) are not impacted.
 166:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 167:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     *** Shutdown mode ***
ARM GAS  C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s 			page 5


 168:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****    ======================
 169:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     [..]
 170:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****       In Shutdown mode,
 171:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****         voltage regulator is disabled, all clocks are off except LSE, RRS bit is
 172:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****         cleared. SRAM and registers contents are lost except for backup domain
 173:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****         registers.
 174:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****       (+) Entry:
 175:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           (++) The Shutdown mode is entered through HAL_PWREx_EnterSHUTDOWNMode() API,
 176:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****                by setting SLEEPDEEP in Cortex control register.
 177:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****       (+) Exit:
 178:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****           (++) WKUP pin edge detection, RTC event (alarm, timestamp),
 179:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****                LSE CSS detection, reset on NRST pin.
 180:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     [..] Exiting Shutdown generates a brown out reset: Cortex is reset and execute
 181:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****          Reset handler vector, all registers are set to their reset value but ones
 182:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****          in backup domain.
 183:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 184:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** @endverbatim
 185:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @{
 186:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   */
 187:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 188:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 189:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /**
 190:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @brief  Enable the WakeUp PINx functionality.
 191:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @param  WakeUpPinPolarity Specifies which Wake-Up pin to enable.
 192:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         This parameter can be one of the following legacy values which set
 193:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         the default polarity i.e. detection on high level (rising edge):
 194:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3,
 195:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *                PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN6
 196:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         or one of the following value where the user can explicitly specify
 197:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         the enabled pin and the chosen polarity:
 198:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN1_HIGH or PWR_WAKEUP_PIN1_LOW
 199:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN2_HIGH or PWR_WAKEUP_PIN2_LOW
 200:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN3_HIGH or PWR_WAKEUP_PIN3_LOW
 201:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN4_HIGH or PWR_WAKEUP_PIN4_LOW
 202:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN6_HIGH or PWR_WAKEUP_PIN6_LOW
 203:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
 204:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @retval None
 205:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   */
 206:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
 207:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** {
  65              		.loc 1 207 1 is_stmt 1 view -0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		@ link register save eliminated.
 208:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));
  70              		.loc 1 208 3 view .LVU5
 209:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 210:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   /* Specifies the Wake-Up pin polarity for the event detection
 211:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     (rising or falling edge) */
 212:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   MODIFY_REG(PWR->CR4, (PWR_CR4_WP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHI
  71              		.loc 1 212 3 view .LVU6
  72 0000 0549     		ldr	r1, .L5
  73 0002 CA68     		ldr	r2, [r1, #12]
  74 0004 2F23     		movs	r3, #47
  75 0006 0340     		ands	r3, r0
  76 0008 9A43     		bics	r2, r3
ARM GAS  C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s 			page 6


  77 000a 000A     		lsrs	r0, r0, #8
  78              	.LVL1:
  79              		.loc 1 212 3 is_stmt 0 view .LVU7
  80 000c 0243     		orrs	r2, r0
  81 000e CA60     		str	r2, [r1, #12]
 213:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 214:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   /* Enable wake-up pin */
 215:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
  82              		.loc 1 215 3 is_stmt 1 view .LVU8
  83 0010 8A68     		ldr	r2, [r1, #8]
  84 0012 1343     		orrs	r3, r2
  85 0014 8B60     		str	r3, [r1, #8]
 216:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** }
  86              		.loc 1 216 1 is_stmt 0 view .LVU9
  87              		@ sp needed
  88 0016 7047     		bx	lr
  89              	.L6:
  90              		.align	2
  91              	.L5:
  92 0018 00700040 		.word	1073770496
  93              		.cfi_endproc
  94              	.LFE215:
  96              		.section	.text.HAL_PWR_DisableWakeUpPin,"ax",%progbits
  97              		.align	1
  98              		.global	HAL_PWR_DisableWakeUpPin
  99              		.syntax unified
 100              		.code	16
 101              		.thumb_func
 103              	HAL_PWR_DisableWakeUpPin:
 104              	.LVL2:
 105              	.LFB216:
 217:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 218:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 219:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /**
 220:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @brief  Disable the WakeUp PINx functionality.
 221:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @param  WakeUpPinx Specifies the Power Wake-Up pin to disable.
 222:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         This parameter can be one of the following values:
 223:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN4,
 224:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *                PWR_WAKEUP_PIN6
 225:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @retval None
 226:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   */
 227:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
 228:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** {
 106              		.loc 1 228 1 is_stmt 1 view -0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              		@ link register save eliminated.
 229:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 111              		.loc 1 229 3 view .LVU11
 230:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 231:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 112              		.loc 1 231 3 view .LVU12
 113 0000 0349     		ldr	r1, .L8
 114 0002 8B68     		ldr	r3, [r1, #8]
 115 0004 2F22     		movs	r2, #47
 116 0006 0240     		ands	r2, r0
ARM GAS  C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s 			page 7


 117 0008 9343     		bics	r3, r2
 118 000a 8B60     		str	r3, [r1, #8]
 232:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** }
 119              		.loc 1 232 1 is_stmt 0 view .LVU13
 120              		@ sp needed
 121 000c 7047     		bx	lr
 122              	.L9:
 123 000e C046     		.align	2
 124              	.L8:
 125 0010 00700040 		.word	1073770496
 126              		.cfi_endproc
 127              	.LFE216:
 129              		.section	.text.HAL_PWR_EnterSLEEPMode,"ax",%progbits
 130              		.align	1
 131              		.global	HAL_PWR_EnterSLEEPMode
 132              		.syntax unified
 133              		.code	16
 134              		.thumb_func
 136              	HAL_PWR_EnterSLEEPMode:
 137              	.LVL3:
 138              	.LFB217:
 233:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 234:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 235:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /**
 236:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @brief  Enter Sleep mode.
 237:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @note   In Sleep mode, all I/O pins keep the same state as
 238:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         in Run mode.
 239:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @param  Regulator Specifies the regulator state in Sleep mode.
 240:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         This parameter can be the following value:
 241:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *           @arg @ref PWR_MAINREGULATOR_ON Sleep mode (regulator in main mode)
 242:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @param  SLEEPEntry Specifies if Sleep mode is entered with WFI or WFE
 243:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         instruction. This parameter can be one of the following values:
 244:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *           @arg @ref PWR_SLEEPENTRY_WFI enter Sleep or Low-power Sleep
 245:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *                     mode with WFI instruction
 246:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *           @arg @ref PWR_SLEEPENTRY_WFE enter Sleep or Low-power Sleep
 247:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *                     mode with WFE instruction
 248:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @note   When WFI entry is used, tick interrupt have to be disabled if not
 249:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         desired as the interrupt wake up source.
 250:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @retval None
 251:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   */
 252:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
 253:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** {
 139              		.loc 1 253 1 is_stmt 1 view -0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143              		@ link register save eliminated.
 254:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   /* Check the parameters */
 255:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 144              		.loc 1 255 3 view .LVU15
 256:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
 145              		.loc 1 256 3 view .LVU16
 257:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 258:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex System Control Register */
 259:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 146              		.loc 1 259 3 view .LVU17
 147 0000 064A     		ldr	r2, .L14
ARM GAS  C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s 			page 8


 148 0002 1369     		ldr	r3, [r2, #16]
 149 0004 0420     		movs	r0, #4
 150              	.LVL4:
 151              		.loc 1 259 3 is_stmt 0 view .LVU18
 152 0006 8343     		bics	r3, r0
 153 0008 1361     		str	r3, [r2, #16]
 260:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 261:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   /* Select SLEEP mode entry -------------------------------------------------*/
 262:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 154              		.loc 1 262 3 is_stmt 1 view .LVU19
 155              		.loc 1 262 6 is_stmt 0 view .LVU20
 156 000a 0129     		cmp	r1, #1
 157 000c 03D0     		beq	.L13
 263:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   {
 264:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 265:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     __WFI();
 266:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   }
 267:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   else
 268:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   {
 269:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     /* Request Wait For Event */
 270:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     __SEV();
 158              		.loc 1 270 5 is_stmt 1 view .LVU21
 159              		.syntax divided
 160              	@ 270 "Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c" 1
 161 000e 40BF     		sev
 162              	@ 0 "" 2
 271:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     __WFE();
 163              		.loc 1 271 5 view .LVU22
 164              	@ 271 "Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c" 1
 165 0010 20BF     		wfe
 166              	@ 0 "" 2
 272:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     __WFE();
 167              		.loc 1 272 5 view .LVU23
 168              	@ 272 "Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c" 1
 169 0012 20BF     		wfe
 170              	@ 0 "" 2
 171              		.thumb
 172              		.syntax unified
 173              	.L10:
 273:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   }
 274:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** }
 174              		.loc 1 274 1 is_stmt 0 view .LVU24
 175              		@ sp needed
 176 0014 7047     		bx	lr
 177              	.L13:
 265:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   }
 178              		.loc 1 265 5 is_stmt 1 view .LVU25
 179              		.syntax divided
 180              	@ 265 "Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c" 1
 181 0016 30BF     		wfi
 182              	@ 0 "" 2
 183              		.thumb
 184              		.syntax unified
 185 0018 FCE7     		b	.L10
 186              	.L15:
 187 001a C046     		.align	2
 188              	.L14:
ARM GAS  C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s 			page 9


 189 001c 00ED00E0 		.word	-536810240
 190              		.cfi_endproc
 191              	.LFE217:
 193              		.section	.text.HAL_PWR_EnterSTOPMode,"ax",%progbits
 194              		.align	1
 195              		.global	HAL_PWR_EnterSTOPMode
 196              		.syntax unified
 197              		.code	16
 198              		.thumb_func
 200              	HAL_PWR_EnterSTOPMode:
 201              	.LVL5:
 202              	.LFB218:
 275:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 276:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 277:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /**
 278:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @brief  Enter Stop mode
 279:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @note   This API is named HAL_PWR_EnterSTOPMode to ensure compatibility with
 280:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         legacy code running on devices where only "Stop mode" is mentioned
 281:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         with main regulator ON.
 282:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 283:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @note   All clocks in the VCORE domain are stopped; the HSI and the
 284:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         HSE oscillators are disabled. Some peripherals with the wakeup
 285:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         capability can switch on the HSI to receive a frame, and switch off
 286:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         the HSI after receiving the frame if it is not a wakeup frame.
 287:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         SRAM and register contents are preserved.
 288:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @note   When exiting Stop 0 mode by issuing an interrupt or a
 289:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         wakeup event, the HSI RC oscillator is selected as system clock
 290:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @param  Regulator Specifies the regulator state in Stop mode
 291:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         This parameter can be of the following value:
 292:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *            @arg @ref PWR_MAINREGULATOR_ON  Stop 0 mode (main regulator ON)
 293:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @param  STOPEntry Specifies Stop 0 mode is entered with WFI or
 294:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         WFE instruction. This parameter can be one of the following values:
 295:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 mode with WFI
 296:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *                                         instruction.
 297:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 mode with WFE
 298:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *                                         instruction.
 299:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @retval None
 300:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   */
 301:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
 302:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** {
 203              		.loc 1 302 1 view -0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207              		@ link register save eliminated.
 303:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   /* Check the parameters */
 304:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 208              		.loc 1 304 3 view .LVU27
 305:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 209              		.loc 1 305 3 view .LVU28
 306:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 307:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 210              		.loc 1 307 3 view .LVU29
 211 0000 0B4A     		ldr	r2, .L20
 212 0002 1368     		ldr	r3, [r2]
 213 0004 0720     		movs	r0, #7
 214              	.LVL6:
ARM GAS  C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s 			page 10


 215              		.loc 1 307 3 is_stmt 0 view .LVU30
 216 0006 8343     		bics	r3, r0
 217 0008 1360     		str	r3, [r2]
 308:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 309:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 310:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 218              		.loc 1 310 3 is_stmt 1 view .LVU31
 219 000a 0A4A     		ldr	r2, .L20+4
 220 000c 1369     		ldr	r3, [r2, #16]
 221 000e 0338     		subs	r0, r0, #3
 222 0010 0343     		orrs	r3, r0
 223 0012 1361     		str	r3, [r2, #16]
 311:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 312:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   /* Select Stop mode entry --------------------------------------------------*/
 313:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   if (STOPEntry == PWR_STOPENTRY_WFI)
 224              		.loc 1 313 3 view .LVU32
 225              		.loc 1 313 6 is_stmt 0 view .LVU33
 226 0014 0129     		cmp	r1, #1
 227 0016 08D0     		beq	.L19
 314:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   {
 315:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 316:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     __WFI();
 317:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   }
 318:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   else
 319:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   {
 320:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     /* Request Wait For Event */
 321:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     __SEV();
 228              		.loc 1 321 5 is_stmt 1 view .LVU34
 229              		.syntax divided
 230              	@ 321 "Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c" 1
 231 0018 40BF     		sev
 232              	@ 0 "" 2
 322:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     __WFE();
 233              		.loc 1 322 5 view .LVU35
 234              	@ 322 "Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c" 1
 235 001a 20BF     		wfe
 236              	@ 0 "" 2
 323:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****     __WFE();
 237              		.loc 1 323 5 view .LVU36
 238              	@ 323 "Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c" 1
 239 001c 20BF     		wfe
 240              	@ 0 "" 2
 241              		.thumb
 242              		.syntax unified
 243              	.L18:
 324:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   }
 325:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 326:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 327:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 244              		.loc 1 327 3 view .LVU37
 245 001e 054A     		ldr	r2, .L20+4
 246 0020 1369     		ldr	r3, [r2, #16]
 247 0022 0421     		movs	r1, #4
 248              	.LVL7:
 249              		.loc 1 327 3 is_stmt 0 view .LVU38
 250 0024 8B43     		bics	r3, r1
 251 0026 1361     		str	r3, [r2, #16]
ARM GAS  C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s 			page 11


 328:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** }
 252              		.loc 1 328 1 view .LVU39
 253              		@ sp needed
 254 0028 7047     		bx	lr
 255              	.LVL8:
 256              	.L19:
 316:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   }
 257              		.loc 1 316 5 is_stmt 1 view .LVU40
 258              		.syntax divided
 259              	@ 316 "Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c" 1
 260 002a 30BF     		wfi
 261              	@ 0 "" 2
 262              		.thumb
 263              		.syntax unified
 264 002c F7E7     		b	.L18
 265              	.L21:
 266 002e C046     		.align	2
 267              	.L20:
 268 0030 00700040 		.word	1073770496
 269 0034 00ED00E0 		.word	-536810240
 270              		.cfi_endproc
 271              	.LFE218:
 273              		.section	.text.HAL_PWR_EnterSTANDBYMode,"ax",%progbits
 274              		.align	1
 275              		.global	HAL_PWR_EnterSTANDBYMode
 276              		.syntax unified
 277              		.code	16
 278              		.thumb_func
 280              	HAL_PWR_EnterSTANDBYMode:
 281              	.LFB219:
 329:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 330:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 331:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /**
 332:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @brief  Enter Standby mode.
 333:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @note   In Standby mode,the HSI and the HSE oscillators are
 334:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         switched off. SRAM and register contents are lost except
 335:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         for registers in the Backup domain and Standby circuitry.
 336:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @note   The I/Os can be configured either with a pull-up or pull-down or can
 337:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         be kept in analog state.
 338:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         HAL_PWREx_EnableGPIOPullUp() and HAL_PWREx_EnableGPIOPullDown()
 339:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         respectively enable Pull Up and PullDown state.
 340:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         HAL_PWREx_DisableGPIOPullUp() & HAL_PWREx_DisableGPIOPullDown()
 341:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         disable the same. These states are effective in Standby mode only if
 342:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         APC bit is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
 343:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @retval None
 344:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   */
 345:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** void HAL_PWR_EnterSTANDBYMode(void)
 346:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** {
 282              		.loc 1 346 1 view -0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 0, uses_anonymous_args = 0
 286              		@ link register save eliminated.
 347:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   /* Set Stand-by mode */
 348:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 287              		.loc 1 348 3 view .LVU42
 288 0000 064A     		ldr	r2, .L23
ARM GAS  C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s 			page 12


 289 0002 1368     		ldr	r3, [r2]
 290 0004 0721     		movs	r1, #7
 291 0006 8B43     		bics	r3, r1
 292 0008 0439     		subs	r1, r1, #4
 293 000a 0B43     		orrs	r3, r1
 294 000c 1360     		str	r3, [r2]
 349:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 350:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 351:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 295              		.loc 1 351 3 view .LVU43
 296 000e 044A     		ldr	r2, .L23+4
 297 0010 1369     		ldr	r3, [r2, #16]
 298 0012 0131     		adds	r1, r1, #1
 299 0014 0B43     		orrs	r3, r1
 300 0016 1361     		str	r3, [r2, #16]
 352:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 353:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   /* Request Wait For Interrupt */
 354:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   __WFI();
 301              		.loc 1 354 3 view .LVU44
 302              		.syntax divided
 303              	@ 354 "Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c" 1
 304 0018 30BF     		wfi
 305              	@ 0 "" 2
 355:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** }
 306              		.loc 1 355 1 is_stmt 0 view .LVU45
 307              		.thumb
 308              		.syntax unified
 309              		@ sp needed
 310 001a 7047     		bx	lr
 311              	.L24:
 312              		.align	2
 313              	.L23:
 314 001c 00700040 		.word	1073770496
 315 0020 00ED00E0 		.word	-536810240
 316              		.cfi_endproc
 317              	.LFE219:
 319              		.section	.text.HAL_PWR_EnableSleepOnExit,"ax",%progbits
 320              		.align	1
 321              		.global	HAL_PWR_EnableSleepOnExit
 322              		.syntax unified
 323              		.code	16
 324              		.thumb_func
 326              	HAL_PWR_EnableSleepOnExit:
 327              	.LFB220:
 356:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 357:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 358:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /**
 359:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @brief  Enable Sleep-On-Exit Cortex feature
 360:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @note   Set SLEEPONEXIT bit of SCR register. When this bit is set, the
 361:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         processor enters SLEEP or DEEPSLEEP mode when an interruption
 362:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         handling is over returning to thread mode. Setting this bit is
 363:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         useful when the processor is expected to run only on interruptions
 364:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         handling.
 365:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @retval None
 366:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   */
 367:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** void HAL_PWR_EnableSleepOnExit(void)
 368:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** {
ARM GAS  C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s 			page 13


 328              		.loc 1 368 1 is_stmt 1 view -0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 0
 331              		@ frame_needed = 0, uses_anonymous_args = 0
 332              		@ link register save eliminated.
 369:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   /* Set SLEEPONEXIT bit of Cortex System Control Register */
 370:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 333              		.loc 1 370 3 view .LVU47
 334 0000 024A     		ldr	r2, .L26
 335 0002 1369     		ldr	r3, [r2, #16]
 336 0004 0221     		movs	r1, #2
 337 0006 0B43     		orrs	r3, r1
 338 0008 1361     		str	r3, [r2, #16]
 371:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** }
 339              		.loc 1 371 1 is_stmt 0 view .LVU48
 340              		@ sp needed
 341 000a 7047     		bx	lr
 342              	.L27:
 343              		.align	2
 344              	.L26:
 345 000c 00ED00E0 		.word	-536810240
 346              		.cfi_endproc
 347              	.LFE220:
 349              		.section	.text.HAL_PWR_DisableSleepOnExit,"ax",%progbits
 350              		.align	1
 351              		.global	HAL_PWR_DisableSleepOnExit
 352              		.syntax unified
 353              		.code	16
 354              		.thumb_func
 356              	HAL_PWR_DisableSleepOnExit:
 357              	.LFB221:
 372:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 373:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 374:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /**
 375:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @brief  Disable Sleep-On-Exit Cortex feature
 376:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @note   Clear SLEEPONEXIT bit of SCR register. When this bit is set, the
 377:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         processor enters SLEEP or DEEPSLEEP mode when an interruption
 378:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         handling is over.
 379:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @retval None
 380:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   */
 381:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** void HAL_PWR_DisableSleepOnExit(void)
 382:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** {
 358              		.loc 1 382 1 is_stmt 1 view -0
 359              		.cfi_startproc
 360              		@ args = 0, pretend = 0, frame = 0
 361              		@ frame_needed = 0, uses_anonymous_args = 0
 362              		@ link register save eliminated.
 383:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   /* Clear SLEEPONEXIT bit of Cortex System Control Register */
 384:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 363              		.loc 1 384 3 view .LVU50
 364 0000 024A     		ldr	r2, .L29
 365 0002 1369     		ldr	r3, [r2, #16]
 366 0004 0221     		movs	r1, #2
 367 0006 8B43     		bics	r3, r1
 368 0008 1361     		str	r3, [r2, #16]
 385:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** }
 369              		.loc 1 385 1 is_stmt 0 view .LVU51
ARM GAS  C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s 			page 14


 370              		@ sp needed
 371 000a 7047     		bx	lr
 372              	.L30:
 373              		.align	2
 374              	.L29:
 375 000c 00ED00E0 		.word	-536810240
 376              		.cfi_endproc
 377              	.LFE221:
 379              		.section	.text.HAL_PWR_EnableSEVOnPend,"ax",%progbits
 380              		.align	1
 381              		.global	HAL_PWR_EnableSEVOnPend
 382              		.syntax unified
 383              		.code	16
 384              		.thumb_func
 386              	HAL_PWR_EnableSEVOnPend:
 387              	.LFB222:
 386:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 387:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 388:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /**
 389:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @brief  Enable Cortex Sev On Pending feature.
 390:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @note   Set SEVONPEND bit of SCR register. When this bit is set, enabled
 391:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         events and all interrupts, including disabled ones can wakeup
 392:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         processor from WFE.
 393:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @retval None
 394:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   */
 395:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** void HAL_PWR_EnableSEVOnPend(void)
 396:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** {
 388              		.loc 1 396 1 is_stmt 1 view -0
 389              		.cfi_startproc
 390              		@ args = 0, pretend = 0, frame = 0
 391              		@ frame_needed = 0, uses_anonymous_args = 0
 392              		@ link register save eliminated.
 397:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   /* Set SEVONPEND bit of Cortex System Control Register */
 398:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 393              		.loc 1 398 3 view .LVU53
 394 0000 024A     		ldr	r2, .L32
 395 0002 1369     		ldr	r3, [r2, #16]
 396 0004 1021     		movs	r1, #16
 397 0006 0B43     		orrs	r3, r1
 398 0008 1361     		str	r3, [r2, #16]
 399:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** }
 399              		.loc 1 399 1 is_stmt 0 view .LVU54
 400              		@ sp needed
 401 000a 7047     		bx	lr
 402              	.L33:
 403              		.align	2
 404              	.L32:
 405 000c 00ED00E0 		.word	-536810240
 406              		.cfi_endproc
 407              	.LFE222:
 409              		.section	.text.HAL_PWR_DisableSEVOnPend,"ax",%progbits
 410              		.align	1
 411              		.global	HAL_PWR_DisableSEVOnPend
 412              		.syntax unified
 413              		.code	16
 414              		.thumb_func
 416              	HAL_PWR_DisableSEVOnPend:
ARM GAS  C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s 			page 15


 417              	.LFB223:
 400:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 401:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** 
 402:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** /**
 403:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @brief  Disable Cortex Sev On Pending feature.
 404:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @note   Clear SEVONPEND bit of SCR register. When this bit is clear, only
 405:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   *         enable interrupts or events can wakeup processor from WFE
 406:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   * @retval None
 407:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   */
 408:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** void HAL_PWR_DisableSEVOnPend(void)
 409:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** {
 418              		.loc 1 409 1 is_stmt 1 view -0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 0
 421              		@ frame_needed = 0, uses_anonymous_args = 0
 422              		@ link register save eliminated.
 410:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   /* Clear SEVONPEND bit of Cortex System Control Register */
 411:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 423              		.loc 1 411 3 view .LVU56
 424 0000 024A     		ldr	r2, .L35
 425 0002 1369     		ldr	r3, [r2, #16]
 426 0004 1021     		movs	r1, #16
 427 0006 8B43     		bics	r3, r1
 428 0008 1361     		str	r3, [r2, #16]
 412:Drivers/STM32C0xx_HAL_Driver/Src/stm32c0xx_hal_pwr.c **** }
 429              		.loc 1 412 1 is_stmt 0 view .LVU57
 430              		@ sp needed
 431 000a 7047     		bx	lr
 432              	.L36:
 433              		.align	2
 434              	.L35:
 435 000c 00ED00E0 		.word	-536810240
 436              		.cfi_endproc
 437              	.LFE223:
 439              		.text
 440              	.Letext0:
 441              		.file 2 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.2 Rel1/arm-none-eabi/include/ma
 442              		.file 3 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.2 Rel1/arm-none-eabi/include/sy
 443              		.file 4 "Drivers/CMSIS/Include/core_cm0plus.h"
 444              		.file 5 "Drivers/CMSIS/Device/ST/STM32C0xx/Include/stm32c031xx.h"
ARM GAS  C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s 			page 16


DEFINED SYMBOLS
                            *ABS*:00000000 stm32c0xx_hal_pwr.c
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:19     .text.HAL_PWR_DeInit:00000000 $t
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:25     .text.HAL_PWR_DeInit:00000000 HAL_PWR_DeInit
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:50     .text.HAL_PWR_DeInit:00000018 $d
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:56     .text.HAL_PWR_EnableWakeUpPin:00000000 $t
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:62     .text.HAL_PWR_EnableWakeUpPin:00000000 HAL_PWR_EnableWakeUpPin
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:92     .text.HAL_PWR_EnableWakeUpPin:00000018 $d
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:97     .text.HAL_PWR_DisableWakeUpPin:00000000 $t
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:103    .text.HAL_PWR_DisableWakeUpPin:00000000 HAL_PWR_DisableWakeUpPin
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:125    .text.HAL_PWR_DisableWakeUpPin:00000010 $d
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:130    .text.HAL_PWR_EnterSLEEPMode:00000000 $t
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:136    .text.HAL_PWR_EnterSLEEPMode:00000000 HAL_PWR_EnterSLEEPMode
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:189    .text.HAL_PWR_EnterSLEEPMode:0000001c $d
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:194    .text.HAL_PWR_EnterSTOPMode:00000000 $t
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:200    .text.HAL_PWR_EnterSTOPMode:00000000 HAL_PWR_EnterSTOPMode
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:268    .text.HAL_PWR_EnterSTOPMode:00000030 $d
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:274    .text.HAL_PWR_EnterSTANDBYMode:00000000 $t
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:280    .text.HAL_PWR_EnterSTANDBYMode:00000000 HAL_PWR_EnterSTANDBYMode
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:314    .text.HAL_PWR_EnterSTANDBYMode:0000001c $d
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:320    .text.HAL_PWR_EnableSleepOnExit:00000000 $t
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:326    .text.HAL_PWR_EnableSleepOnExit:00000000 HAL_PWR_EnableSleepOnExit
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:345    .text.HAL_PWR_EnableSleepOnExit:0000000c $d
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:350    .text.HAL_PWR_DisableSleepOnExit:00000000 $t
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:356    .text.HAL_PWR_DisableSleepOnExit:00000000 HAL_PWR_DisableSleepOnExit
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:375    .text.HAL_PWR_DisableSleepOnExit:0000000c $d
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:380    .text.HAL_PWR_EnableSEVOnPend:00000000 $t
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:386    .text.HAL_PWR_EnableSEVOnPend:00000000 HAL_PWR_EnableSEVOnPend
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:405    .text.HAL_PWR_EnableSEVOnPend:0000000c $d
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:410    .text.HAL_PWR_DisableSEVOnPend:00000000 $t
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:416    .text.HAL_PWR_DisableSEVOnPend:00000000 HAL_PWR_DisableSEVOnPend
C:\Users\Yasi\AppData\Local\Temp\cca49ryc.s:435    .text.HAL_PWR_DisableSEVOnPend:0000000c $d

NO UNDEFINED SYMBOLS
